from myCrypto.Math import Number
from myCrypto.Cipher.SM4 import SM4
from myCrypto.Cipher.SM4_ECB import ECB
from myCrypto.Cipher.SM4_CBC import CBC
from myCrypto.Cipher.RSA import RSA
from myCrypto.Signature.RSAPSS import RSA_PSS_Sign
from myCrypto.Hash.SHA1 import SHA1

if __name__ == '__main__':

    # (1)
    print("(1)")
    print(Number.getPrime(1024))
    print(Number.long2bytes(256))
    print(Number.bytes2long(b'\xff'))
    print(Number.inverse(17, 20))
    print(Number.fastPow(3, 4, 5))
    print("\n\n")

    # (2)
    print("(2)")
    s = "1f47f42618704f95e61da82daf959bd8"
    k = "3b3678c215121f0e837e04f58584ed32"
    print(SM4().encrypt(s, k))
    # 输入长度检测
    # print(SM4().encrypt(s+"1", k))
    print(ECB().encrypt(s, k))

    # 文件加解密
    IV = "a8638d2fb23cc49206edd7c84532eaab"
    CBC().encryptFile("testFile.txt", "testOut1", key=k, IV=IV)
    CBC().decryptFile("testOut1", "testOut2.txt", key=k, IV=IV)
    print("\n\n")

    # (3)
    print("(3)")
    plainText = 777
    x = RSA(plainText)
    x.getKey()
    print(x.encrypt())
    print("\n\n")

    # (4)
    print("(4)")
    n = 147392536909181936437649687536275236608397111810866911961031321406357200949149497490874829918983290789963713720012525170038437097493163076328008025719473276301079739164714793313287061056821305985932767583558717456083339835383163815296227035867412143739815403227949440498383247440962310880504561553555306008717
    d = 142851458264112770262596520090816627539443174224254306896913667224682649740371573573303815373891316304203750125881889645262660699584408938152189567219539376806703195857109568944402128751354374513661514717314162820564813620291376346558487120678855207689775466670483558741464410916027601606845517538538321601523
    m = "0523冲突事件后续诉求处理进展https://temp.roycent.cn"
    emBits = 996
    salt = "4758a1c40f6ead39d8281779d63e0bd5377f19a5"
    print(RSA_PSS_Sign(d=d, n=n).sign(m, emBits, salt))

    n = 105989655787727867874788310104276418581728605561665441456890909802839178903456176969222351171746988592435407067984662090109769588473021303915685394978038077688926263034160014542380069428280082820211043832262620549000587441622892256618121952416394734784548462471438592544795014434916820978221392810184161511043
    e = 32903811767573058993775407658279372554462447818880720216377984749260878509799520087409508083277983480631135087319350751286495590715465391251571411675407
    emBits = 1023
    m = "这是一个正经的测试点"
    S = "73bdd78b946d4c9097d8147beceed190466bb9bf70916eef0b2f72ff10496cf3bbbe5f8dccadaeec76341822cd4f41167d740756a1ed4d768d83482686a628dc15d67fdde1d6a156fecb4ecba9b9a3c0883698d03ca48060b7683410b2dfeab6b6fe2448f227b9ed54cb990748295b65eed9d4091833e533e6aff6d005b06058"
    print(RSA_PSS_Sign(e=e, n=n).verify(m, emBits, S))
    print("\n\n")

    # (5)
    print("(5)")
    print(SHA1().hexDigest(b'7777777'))
    print(SHA1().fileHexDigest("testFile.txt"))
    print("\n\n")
